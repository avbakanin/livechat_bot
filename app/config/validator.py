# app/config/validator.py
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
import sys
from typing import Dict, Any, List


class ConfigValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self):
        self.errors: List[str] = []
        self.warnings: List[str] = []
    
    def validate_required_env_vars(self, required_vars: List[str]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        
        Args:
            required_vars: –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, False –∏–Ω–∞—á–µ
        """
        missing_vars = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            self.errors.append(f"Missing required environment variables: {', '.join(missing_vars)}")
            return False
        
        return True
    
    def validate_database_config(self, config: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
        """
        required_db_vars = ["DB_USER", "DB_PASSWORD", "DB_HOST", "DB_NAME"]
        
        if not self.validate_required_env_vars(required_db_vars):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
        port = config.get("port", 5432)
        if not isinstance(port, int) or port < 1 or port > 65535:
            self.errors.append(f"Invalid database port: {port}")
            return False
        
        return True
    
    def validate_telegram_config(self, config: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if not config.get("token"):
            self.errors.append("Telegram token is required")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
        token = config["token"]
        if not token.startswith(("1", "2", "3", "4", "5", "6", "7", "8", "9")):
            self.errors.append("Invalid Telegram token format")
            return False
        
        if len(token.split(":")) != 2:
            self.errors.append("Invalid Telegram token format")
            return False
        
        return True
    
    def validate_openai_config(self, config: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if not config.get("api_key"):
            self.errors.append("OpenAI API key is required")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞
        api_key = config["api_key"]
        if not api_key.startswith("sk-"):
            self.errors.append("Invalid OpenAI API key format")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        limit = config.get("FREE_MESSAGE_LIMIT", 50)
        if not isinstance(limit, int) or limit < 1:
            self.errors.append(f"Invalid FREE_MESSAGE_LIMIT: {limit}")
            return False
        
        return True
    
    def validate_all(self, db_config: Dict[str, Any], telegram_config: Dict[str, Any], 
                   openai_config: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
        
        Args:
            db_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
            telegram_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
            openai_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
        """
        self.errors.clear()
        self.warnings.clear()
        
        db_valid = self.validate_database_config(db_config)
        telegram_valid = self.validate_telegram_config(telegram_config)
        openai_valid = self.validate_openai_config(openai_config)
        
        return db_valid and telegram_valid and openai_valid
    
    def print_errors(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if self.errors:
            print("‚ùå Configuration errors:")
            for error in self.errors:
                print(f"  - {error}")
    
    def print_warnings(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if self.warnings:
            print("‚ö†Ô∏è Configuration warnings:")
            for warning in self.warnings:
                print(f"  - {warning}")
    
    def exit_on_errors(self) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫."""
        if self.errors:
            self.print_errors()
            print("\nüí• Application cannot start due to configuration errors!")
            sys.exit(1)


def validate_configuration(db_config: Dict[str, Any], telegram_config: Dict[str, Any], 
                          openai_config: Dict[str, Any]) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Args:
        db_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
        telegram_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
        openai_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
        
    Returns:
        True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
    """
    validator = ConfigValidator()
    
    if not validator.validate_all(db_config, telegram_config, openai_config):
        validator.print_errors()
        validator.print_warnings()
        validator.exit_on_errors()
        return False
    
    validator.print_warnings()
    print("‚úÖ Configuration validation passed")
    return True
