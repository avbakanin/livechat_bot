from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from domain.quiz.helpers import (
    analyze_personality,
    format_personality_results,
    save_personality_profile,
)
from domain.quiz.fsm import QuizStates

router = Router()

from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery


# –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞
@router.callback_query(F.data == "start_quiz")
async def process_start_quiz(callback: CallbackQuery, state: FSMContext):
    await state.set_state(QuizStates.waiting_for_landscape)
    await callback.message.edit_text(
        "1/7 –í—ã–±–µ—Ä–∏ –ø–µ–π–∑–∞–∂, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –±–ª–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üèîÔ∏è –ì–æ—Ä–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã", callback_data="landscape_mountains"),
                    InlineKeyboardButton(text="üåä –û–∫–µ–∞–Ω—Å–∫–∏–π –±–µ—Ä–µ–≥", callback_data="landscape_ocean"),
                ],
                [
                    InlineKeyboardButton(text="üèûÔ∏è –¢–∏—Ö–∏–π –ª–µ—Å", callback_data="landscape_forest"),
                    InlineKeyboardButton(text="üåá –ì–æ—Ä–æ–¥—Å–∫–∏–µ –æ–≥–Ω–∏", callback_data="landscape_city"),
                ],
            ]
        ),
    )


# –í–æ–ø—Ä–æ—Å 1: –ü–µ–π–∑–∞–∂
@router.callback_query(QuizStates.waiting_for_landscape, F.data.startswith("landscape_"))
async def process_landscape(callback: CallbackQuery, state: FSMContext):
    await state.update_data(landscape=callback.data)
    await state.set_state(QuizStates.waiting_for_superpower)

    await callback.message.edit_text(
        "2/7 –ö–∞–∫—É—é —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç—ã –±—ã –≤—ã–±—Ä–∞–ª?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üß† –ß—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π", callback_data="superpower_mind_reading"
                    ),
                    InlineKeyboardButton(
                        text="üï∞Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", callback_data="superpower_time_stop"
                    ),
                ],
                [
                    InlineKeyboardButton(text="‚úàÔ∏è –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è", callback_data="superpower_teleport"),
                    InlineKeyboardButton(text="üê¢ –ë–µ—Å—Å–º–µ—Ä—Ç–∏–µ", callback_data="superpower_immortality"),
                ],
            ]
        ),
    )


# –í–æ–ø—Ä–æ—Å 2: –°—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
@router.callback_query(QuizStates.waiting_for_superpower, F.data.startswith("superpower_"))
async def process_superpower(callback: CallbackQuery, state: FSMContext):
    await state.update_data(superpower=callback.data)
    await state.set_state(QuizStates.waiting_for_time_of_day)

    await callback.message.edit_text(
        "3/7 –ö–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ —Ç–µ–±–µ –±–ª–∏–∂–µ?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üåÖ –†–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ", callback_data="time_morning"),
                    InlineKeyboardButton(text="‚òÄÔ∏è –î–µ–Ω—å", callback_data="time_day"),
                ],
                [
                    InlineKeyboardButton(text="üåá –í–µ—á–µ—Ä", callback_data="time_evening"),
                    InlineKeyboardButton(text="üåô –ù–æ—á—å", callback_data="time_night"),
                ],
            ]
        ),
    )


# –í–æ–ø—Ä–æ—Å 3: –í—Ä–µ–º—è —Å—É—Ç–æ–∫
@router.callback_query(QuizStates.waiting_for_time_of_day, F.data.startswith("time_"))
async def process_time_of_day(callback: CallbackQuery, state: FSMContext):
    await state.update_data(time_of_day=callback.data)
    await state.set_state(QuizStates.waiting_for_book)

    await callback.message.edit_text(
        "4/7 –ö–∞–∫—É—é –∫–Ω–∏–≥—É —Ç—ã –±—ã –≤–∑—è–ª –Ω–∞ –Ω–µ–æ–±–∏—Ç–∞–µ–º—ã–π –æ—Å—Ç—Ä–æ–≤?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìö –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è", callback_data="book_encyclopedia"),
                    InlineKeyboardButton(text="üìñ –î–µ—Ç–µ–∫—Ç–∏–≤", callback_data="book_detective"),
                ],
                [
                    InlineKeyboardButton(text="üìô –†–æ–º–∞–Ω", callback_data="book_novel"),
                    InlineKeyboardButton(text="üìó –ü–æ—ç–∑–∏—è", callback_data="book_poetry"),
                ],
            ]
        ),
    )


# –í–æ–ø—Ä–æ—Å 4: –ö–Ω–∏–≥–∞
@router.callback_query(QuizStates.waiting_for_book, F.data.startswith("book_"))
async def process_book(callback: CallbackQuery, state: FSMContext):
    await state.update_data(book=callback.data)
    await state.set_state(QuizStates.waiting_for_three_words)

    await callback.message.edit_text("5/7 –û–ø–∏—à–∏ —Å–µ–±—è —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º):")


# –í–æ–ø—Ä–æ—Å 5: –¢—Ä–∏ —Å–ª–æ–≤–∞ –æ —Å–µ–±–µ
@router.message(QuizStates.waiting_for_three_words)
async def process_three_words(message: Message, state: FSMContext):
    if len(message.text.split()) < 2:  # –ú–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ–±—è")
        return

    await state.update_data(three_words=message.text)
    await state.set_state(QuizStates.waiting_for_rest)

    await message.answer(
        "6/7 –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üéâ –í–µ—á–µ—Ä–∏–Ω–∫–∞ —Å –¥—Ä—É–∑—å—è–º–∏", callback_data="rest_party"),
                    InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã/—Ñ–∏–ª—å–º—ã –¥–æ–º–∞", callback_data="rest_home"),
                ],
                [
                    InlineKeyboardButton(text="üèïÔ∏è –ü–æ—Ö–æ–¥ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É", callback_data="rest_nature"),
                    InlineKeyboardButton(text="üìö –ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏", callback_data="rest_reading"),
                ],
            ]
        ),
    )


# –í–æ–ø—Ä–æ—Å 6: –û—Ç–¥—ã—Ö
@router.callback_query(QuizStates.waiting_for_rest, F.data.startswith("rest_"))
async def process_rest(callback: CallbackQuery, state: FSMContext):
    await state.update_data(rest=callback.data)
    await state.set_state(QuizStates.waiting_for_animal)

    await callback.message.edit_text(
        "7/7 –ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Ç–µ–±–µ –±–ª–∏–∂–µ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="ü¶Å –õ–µ–≤", callback_data="animal_lion"),
                    InlineKeyboardButton(text="ü¶ä –õ–∏—Å–∞", callback_data="animal_fox"),
                ],
                [
                    InlineKeyboardButton(text="üê¨ –î–µ–ª—å—Ñ–∏–Ω", callback_data="animal_dolphin"),
                    InlineKeyboardButton(text="ü¶â –°–æ–≤–∞", callback_data="animal_owl"),
                ],
            ]
        ),
    )


# –í–æ–ø—Ä–æ—Å 7: –ñ–∏–≤–æ—Ç–Ω–æ–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
@router.callback_query(QuizStates.waiting_for_animal, F.data.startswith("animal_"))
async def process_animal(callback: CallbackQuery, state: FSMContext):
    await state.update_data(animal=callback.data)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
    data = await state.get_data()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ —á–µ—Ä—Ç—ã
    personality_profile = analyze_personality(data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_personality_profile(callback.from_user.id, personality_profile)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_message = format_personality_results(personality_profile)

    await callback.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–∞! –í–æ—Ç —á—Ç–æ —è —É–∑–Ω–∞–ª –æ —Ç–µ–±–µ:\n\n{result_message}\n\n"
        "–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ üí¨", callback_data="start_chatting")]
            ]
        ),
    )

    await state.clear()
