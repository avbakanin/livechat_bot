import logging
from domain.user.keyboards import get_consent_given_keyboard, get_consent_keyboard, get_gender_change_confirmation_keyboard, get_gender_keyboard, get_help_keyboard, get_privacy_info_keyboard
from shared.keyboards.keyboards import get_consent_given_text, get_help_text, get_limit_exceeded_keyboard, get_premium_info_keyboard, get_premium_info_text, get_privacy_info_text
import asyncpg
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ChatAction
from typing import Union, List, Dict
from openai import AsyncOpenAI

from services import add_user, add_message, get_context, get_gender_preference, set_gender_preference, can_send, get_user_consent, set_user_consent, delete_user_messages

from shared.helpers import destructure_user

from shared.middlewares.middlewares import AccessMiddleware

router = Router()

# allow only specific Telegram user IDs
router.message.middleware(AccessMiddleware(allowed_ids={627875032, 1512454100}))
router.callback_query.middleware(AccessMiddleware(allowed_ids={627875032, 1512454100}))

# Types to arguments
# pool: asyncpg.Pool, client: AsyncOpenAI

@router.message(Command(commands=["start"]))
async def cmd_start(message: Message, pool: asyncpg.Pool):
    user_id, username, first_name, last_name = destructure_user(message.from_user)
    await add_user(pool, user_id, username, first_name, last_name)
    
    consent = await get_user_consent(pool, user_id)
    # –†–∞–∑—Ä–µ—à–∞–µ–º /start —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (–ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è)
    if consent:
        await message.answer("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ üòä")
        return
    if not consent:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–∏—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup=get_consent_keyboard()
        )
        return
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –ø–æ–∫–∞–∑–∞–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–∏—è –≤—ã—à–µ –∏ –≤—ã—Ö–æ–¥–∏–º

# GENDER handlers
@router.message(Command(commands=["choose_gender"]))
async def cmd_choose_gender(message: Message, pool: asyncpg.Pool):
    user_id, username, first_name, last_name = destructure_user(message.from_user)
    await add_user(pool, user_id, username, first_name, last_name)
    
    # Check if gender is already set
    current_gender = await get_gender_preference(pool, user_id)
    if current_gender and current_gender != 'female':  # 'female' is default, so if it's not default, it was set
        await message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ–ª –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞?\n\n"
            "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=get_gender_change_confirmation_keyboard()
        )
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –ø–æ–ª –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞:",
            reply_markup=get_gender_keyboard()
        )

@router.callback_query(F.data.in_(["gender_female", "gender_male"]))
async def gender_choice(callback: CallbackQuery, pool: asyncpg.Pool):
    user = callback.from_user
    preference = "female" if callback.data == "gender_female" else "male"
    
    try:
        await set_gender_preference(pool, user.id, preference)
        response_text = "–¥–µ–≤—É—à–∫—É üòä" if preference == "female" else "–º–æ–ª–æ–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ üòâ"
        await callback.message.edit_text(f"–ü–æ–ª –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {response_text}.")
    except Exception as e:
        logging.error(f"Error setting gender_preference: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await callback.answer()

@router.callback_query(F.data == "gender_change_confirm")
async def gender_change_confirm(callback: CallbackQuery, pool: asyncpg.Pool):
    user = callback.from_user
    
    try:
        # Delete all user messages
        await delete_user_messages(pool, user.id)
        
        # Show gender selection
        await callback.message.edit_text(
            "–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏ –ø–æ–ª –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞:",
            reply_markup=get_gender_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in gender change confirmation: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await callback.answer()

@router.callback_query(F.data == "gender_change_cancel")
async def gender_change_cancel(callback: CallbackQuery):
    await callback.message.edit_text("–°–º–µ–Ω–∞ –ø–æ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.")
    await callback.answer()

@router.callback_query(F.data == "choose_gender_help")
async def gender_help(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=get_gender_keyboard())
    await callback.answer()

# PREMIUM handlers
@router.callback_query(F.data == "subscribe_premium")
async def premium_subscribe(callback: CallbackQuery):
    await callback.message.edit_text("–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

# HELP handlers
@router.message(Command(commands=["help"]))
async def cmd_help(message: Message, pool: asyncpg.Pool):
    user_id, username, first_name, last_name = destructure_user(message.from_user)
    await add_user(pool, user_id, username, first_name, last_name)
    
    await message.answer(
        get_help_text(),
        reply_markup=get_help_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "premium_info_help")
async def premium_info(callback: CallbackQuery):
    await callback.message.edit_text(get_premium_info_text(), reply_markup=get_premium_info_keyboard(), parse_mode="HTML")
    await callback.answer()

# CONSENT handlers
@router.callback_query(F.data == "consent_agree")
async def consent_agree(callback: CallbackQuery, pool):
    user = callback.from_user
    await add_user(pool, user.id, user.username, user.first_name, user.last_name)
    
    try:
        await set_user_consent(pool, user.id, True)
        await callback.message.edit_text(get_consent_given_text(), reply_markup=get_consent_given_keyboard())
    except Exception as e:
        logging.error(f"Error setting consent: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await callback.answer()

@router.callback_query(F.data == "privacy_info_help")
async def privacy_info(callback: CallbackQuery):
    await callback.message.edit_text(get_privacy_info_text(), reply_markup=get_privacy_info_keyboard(), parse_mode="HTML")
    await callback.answer()

# shared
@router.callback_query(F.data == "back_to_help")
async def back_to_help(callback: CallbackQuery):
    await callback.message.edit_text(get_help_text(), reply_markup=get_help_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.message()
async def handle_message(message: Message, pool: asyncpg.Pool, client: AsyncOpenAI, bot):
    if message.text.startswith('/'):
        return
        
    user_id, username, first_name, last_name = destructure_user(message.from_user)
    await add_user(pool, user_id, username, first_name, last_name)

    if not await get_user_consent(pool, user_id):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–∏—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup=get_consent_keyboard()
        )
        return

    if not await can_send(pool, user_id):
        await message.answer(
            "–ü—Ä–µ–≤—ã—à–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –•–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç? –ö—É–ø–∏ –ø—Ä–µ–º–∏—É–º!",
            reply_markup=get_limit_exceeded_keyboard()
        )
        return

    await add_message(pool, user_id, 'user', message.text)
    
    # Show typing status
    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    
    try:
        gender = await get_gender_preference(pool, user_id)
        system_prompt = {
            'female': "–¢—ã –ò–ò-–¥–µ–≤—É—à–∫–∞, —Ñ–ª–∏—Ä—Ç—É—é—â–∞—è –∏ supportive –¥–ª—è –æ–¥–∏–Ω–æ–∫–∏—Ö –ª—é–¥–µ–π. –ë—É–¥—å –º–∏–ª–æ–π, empathetic –∏ –∏–≥—Ä–∏–≤–æ–π.",
            'male': "–¢—ã –ò–ò-–º–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫, —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π –∏ supportive –¥–ª—è –æ–¥–∏–Ω–æ–∫–∏—Ö –ª—é–¥–µ–π. –ë—É–¥—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º, empathetic –∏ –∏–≥—Ä–∏–≤—ã–º."
        }[gender]

        history = await get_context(pool, user_id, limit=10)
        messages = [{"role": "system", "content": system_prompt}] + [{"role": h["role"], "content": h["text"]} for h in history] + [{"role": "user", "content": message.text}]

        answer = await get_openapi_response(messages=messages, client=client)
    except Exception as e:
        answer = f"–û—à–∏–±–∫–∞: {e}"
        logging.error(f"OpenAI error: {e}")

    await add_message(pool, user_id, 'assistant', answer)
    await message.answer(answer)


# –í—ã–Ω–µ—Å—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª, —Ö–µ–ª–ø–µ—Ä—ã?
async def get_openapi_response(messages: List[Dict[str, Union[str, None]]], client: AsyncOpenAI) -> str:
    response = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.7,
        max_tokens=1000  # –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        # max_completion_tokens=1000  # –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        # max_completion_tokens=1000
    )

    return response.choices[0].message.content.strip() or "OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."


@router.message(Command(commands=["privacy"]))
async def privacy_policy(message: Message):
    text = (
        "üîê <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...\n\n"
        "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: https://yourwebsite.com/privacy"
    )
    await message.answer(text)
