"""
Debug information utilities for troubleshooting and monitoring.
"""

from typing import Any, Dict, Optional, Union
from datetime import datetime
from shared.utils.datetime_utils import DateTimeUtils


class DebugInfoGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤."""
    
    @staticmethod
    def format_user_debug_info(user_id: int, user: Optional[Any] = None, 
                             cached_user: Optional[Any] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            cached_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        debug_info = f"üîç Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ë–î
        if user:
            debug_info += f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:\n"
            debug_info += f"  ID: {user.id}\n"
            debug_info += f"  Username: {user.username}\n"
            debug_info += f"  First Name: {user.first_name}\n"
            debug_info += f"  Last Name: {user.last_name}\n"
            debug_info += f"  Language: {user.language}\n"
            debug_info += f"  Gender Preference: {user.gender_preference}\n"
            debug_info += f"  Subscription Status: {user.subscription_status}\n"
            debug_info += f"  Subscription Expires At: {user.subscription_expires_at}\n"
            debug_info += f"  Consent Given: {user.consent_given}\n"
            debug_info += f"  Created At: {user.created_at}\n"
            debug_info += f"  Updated At: {user.updated_at}\n"
            if hasattr(user, 'personality_profile') and user.personality_profile:
                debug_info += f"  Personality Profile: {user.personality_profile}\n"
            debug_info += "\n"
        else:
            debug_info += f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫—ç—à–∞
        if cached_user:
            debug_info += f"üíæ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:\n"
            debug_info += f"  Subscription Status: {cached_user.subscription_status}\n"
            debug_info += f"  Subscription Expires At: {cached_user.subscription_expires_at}\n"
            debug_info += f"  Consent Given: {cached_user.consent_given}\n"
            debug_info += f"  Language: {cached_user.language}\n"
            debug_info += f"  Gender Preference: {cached_user.gender_preference}\n"
            if hasattr(cached_user, 'personality_profile') and cached_user.personality_profile:
                debug_info += f"  Personality Profile: {cached_user.personality_profile}\n"
        else:
            debug_info += f"üíæ –ö—ç—à –ø—É—Å—Ç\n"
        
        return debug_info
    
    @staticmethod
    def format_subscription_debug_info(user_id: int, subscription_status: str, 
                                    expires_at: Optional[datetime] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription_status: –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            expires_at: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        """
        debug_info = f"üí≥ Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
        debug_info += f"  –°—Ç–∞—Ç—É—Å: {subscription_status}\n"
        
        if expires_at:
            debug_info += f"  –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}\n"
            debug_info += f"  –ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if not DateTimeUtils.is_expired(expires_at) else '–ù–µ—Ç'}\n"
        else:
            debug_info += f"  –ò—Å—Ç–µ–∫–∞–µ—Ç: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
            debug_info += f"  –ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if subscription_status == 'premium' else '–ù–µ—Ç'}\n"
        
        return debug_info
    
    @staticmethod
    def format_personality_debug_info(user_id: int, personality_profile: Optional[Dict[str, float]]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ª–∏—á–Ω–æ—Å—Ç–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            personality_profile: –ü—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏—á–Ω–æ—Å—Ç–∏
        """
        debug_info = f"üß† Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
        
        if personality_profile:
            debug_info += f"  –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: –î–∞\n"
            debug_info += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä—Ç: {len(personality_profile)}\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
            sorted_traits = sorted(personality_profile.items(), key=lambda x: x[1], reverse=True)
            
            debug_info += f"  –¢–æ–ø-5 —á–µ—Ä—Ç:\n"
            for i, (trait, value) in enumerate(sorted_traits[:5], 1):
                debug_info += f"    {i}. {trait}: {value:.2f}\n"
            
            if len(sorted_traits) > 5:
                debug_info += f"    ... –∏ –µ—â–µ {len(sorted_traits) - 5} —á–µ—Ä—Ç\n"
        else:
            debug_info += f"  –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: –ù–µ—Ç\n"
        
        return debug_info
    
    @staticmethod
    def format_general_debug_info(title: str, data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        debug_info = f"üîç {title}:\n\n"
        
        for key, value in data.items():
            if isinstance(value, dict):
                debug_info += f"  {key}:\n"
                for sub_key, sub_value in value.items():
                    debug_info += f"    {sub_key}: {sub_value}\n"
            elif isinstance(value, list):
                debug_info += f"  {key}: [{', '.join(map(str, value))}]\n"
            else:
                debug_info += f"  {key}: {value}\n"
        
        return debug_info
    
    @staticmethod
    def format_error_debug_info(error: Exception, context: Optional[Dict[str, Any]] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ.
        
        Args:
            error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        """
        debug_info = f"‚ùå Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:\n\n"
        debug_info += f"  –¢–∏–ø –æ—à–∏–±–∫–∏: {type(error).__name__}\n"
        debug_info += f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}\n"
        
        if context:
            debug_info += f"\n  –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n"
            for key, value in context.items():
                debug_info += f"    {key}: {value}\n"
        
        return debug_info


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
debug_info_generator = DebugInfoGenerator()


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_user_debug_info(user_id: int, user: Optional[Any] = None, 
                       cached_user: Optional[Any] = None) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    return debug_info_generator.format_user_debug_info(user_id, user, cached_user)


def get_subscription_debug_info(user_id: int, subscription_status: str, 
                             expires_at: Optional[datetime] = None) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ."""
    return debug_info_generator.format_subscription_debug_info(user_id, subscription_status, expires_at)


def get_personality_debug_info(user_id: int, personality_profile: Optional[Dict[str, float]]) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ—Å—Ç–∏."""
    return debug_info_generator.format_personality_debug_info(user_id, personality_profile)


def get_general_debug_info(title: str, data: Dict[str, Any]) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–π –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    return debug_info_generator.format_general_debug_info(title, data)


def get_error_debug_info(error: Exception, context: Optional[Dict[str, Any]] = None) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ."""
    return debug_info_generator.format_error_debug_info(error, context)
