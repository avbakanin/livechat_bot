"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ PersonService.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
"""

from services.person.person_service import PersonService


def example_persona_debug():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π PersonService."""
    
    person_service = PersonService()
    
    print("=== –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ===\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    print("1. –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:")
    data_status = person_service.get_persons_data_debug_info()
    print(f"   –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {data_status['data_loaded']}")
    print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data_status.get('data_type', 'N/A')}")
    print(f"   –ï—Å—Ç—å –ø–æ–ª—ã: {data_status.get('has_gender', False)}")
    print(f"   –ï—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç—ã: {data_status.get('has_temperament', False)}")
    print(f"   –ï—Å—Ç—å —á–µ—Ä—Ç—ã: {data_status.get('has_traits', False)}")
    print(f"   –í—Å–µ–≥–æ —á–µ—Ä—Ç: {data_status.get('total_traits', 0)}")
    
    # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    print("\n2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:")
    stats = person_service.get_persona_statistics()
    if stats['available']:
        print(f"   –û–ø—Ü–∏–π –ø–æ–ª–∞: {stats['gender_options']}")
        print(f"   –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–æ–≤: {stats['temperament_options']}")
        print(f"   –ì—Ä—É–ø–ø —á–µ—Ä—Ç: {stats['trait_groups']}")
        print(f"   –í—Å–µ–≥–æ —á–µ—Ä—Ç: {stats['total_traits']}")
        print(f"   –í–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {stats['possible_combinations']}")
        
        print(f"\n   –î–µ—Ç–∞–ª–∏ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–æ–≤:")
        for temp_key, temp_info in stats['temperament_details'].items():
            print(f"     {temp_key}: {temp_info['description'][:50]}...")
        
        print(f"\n   –î–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø —á–µ—Ä—Ç:")
        for group_name, group_info in stats['trait_group_details'].items():
            print(f"     {group_name}: {group_info['trait_count']} —á–µ—Ä—Ç")
    else:
        print(f"   –û—à–∏–±–∫–∞: {stats.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # 3. –û—Ç–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    print("\n3. –û—Ç–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    debug_info = person_service.generate_persona_debug_info("male")
    
    if debug_info['generation_successful']:
        print(f"   –ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {debug_info['user_gender']}")
        print(f"   –ü–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {debug_info['persona_gender']}")
        print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: {debug_info['selected_temperament']['key']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞: {debug_info['selected_temperament']['text']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø —á–µ—Ä—Ç: {debug_info['total_trait_groups']}")
        print(f"   –î–ª–∏–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {debug_info['final_content_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"\n   –í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–µ—Ä—Ç—ã:")
        for trait in debug_info['selected_traits']:
            print(f"     {trait['group']}: {trait['key']} - {trait['text'][:50]}...")
    else:
        print(f"   –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {debug_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    print("\n4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–æ–≤:")
    
    for gender in ["male", "female"]:
        debug_info = person_service.generate_persona_debug_info(gender)
        if debug_info['generation_successful']:
            print(f"   {gender}: {debug_info['selected_temperament']['key']} "
                  f"({debug_info['final_content_length']} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"   {gender}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")


def example_telegram_bot_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram –±–æ—Ç–µ."""
    
    print("\n=== –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram –±–æ—Ç–µ ===\n")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç –∞–¥–º–∏–Ω–∞
    admin_commands = [
        "/debug_msg persona",
        "/debug_msg persona_stats", 
        "/debug_msg persona_data"
    ]
    
    person_service = PersonService()
    
    for command in admin_commands:
        print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
        
        if "persona_stats" in command:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            stats = person_service.get_persona_statistics()
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å {stats.get('possible_combinations', 0)} –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏")
            
        elif "persona_data" in command:
            # –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö
            data_status = person_service.get_persons_data_debug_info()
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: –î–∞–Ω–Ω—ã–µ {'–∑–∞–≥—Ä—É–∂–µ–Ω—ã' if data_status['data_loaded'] else '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}")
            
        elif "persona" in command:
            # –ü–æ–ª–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
            debug_info = person_service.generate_persona_debug_info("female")
            if debug_info['generation_successful']:
                print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–µ—Ä—Å–æ–Ω–∞–∂ {debug_info['persona_gender']} "
                      f"—Å —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–æ–º {debug_info['selected_temperament']['key']}")
            else:
                print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        print()


def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    
    print("=== –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===\n")
    
    person_service = PersonService()
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫
    scenarios = [
        ("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "male"),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª–∞", "unknown"),
    ]
    
    for scenario_name, gender in scenarios:
        print(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_name}")
        
        try:
            debug_info = person_service.generate_persona_debug_info(gender)
            
            if debug_info['generation_successful']:
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {debug_info['persona_gender']} –ø–µ—Ä—Å–æ–Ω–∞–∂")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {debug_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"  üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print()


def example_performance_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    print("=== –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===\n")
    
    import time
    
    person_service = PersonService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    operations = [
        ("get_persons_data_debug_info", lambda: person_service.get_persons_data_debug_info()),
        ("get_persona_statistics", lambda: person_service.get_persona_statistics()),
        ("generate_persona_debug_info", lambda: person_service.generate_persona_debug_info("male")),
    ]
    
    for op_name, operation in operations:
        times = []
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        for _ in range(5):
            start_time = time.time()
            result = operation()
            end_time = time.time()
            times.append(end_time - start_time)
        
        avg_time = sum(times) / len(times)
        print(f"{op_name}: {avg_time:.4f} —Å–µ–∫—É–Ω–¥ (—Å—Ä–µ–¥–Ω–µ–µ –∏–∑ 5 –ø–æ–ø—ã—Ç–æ–∫)")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
    example_persona_debug()
    example_telegram_bot_usage()
    example_error_handling()
    example_performance_analysis()
    
    print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
