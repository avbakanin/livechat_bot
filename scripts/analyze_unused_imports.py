#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
"""

import ast
import os
from pathlib import Path
from typing import Set, Dict, List


class ImportAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö."""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.unused_imports = {}
        
    def analyze_file(self, file_path: Path) -> Dict[str, List[str]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
            imports = set()
            import_froms = set()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–µ–Ω–∞
            used_names = set()
            
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.add(alias.name)
                elif isinstance(node, ast.ImportFrom):
                    if node.module:
                        for alias in node.names:
                            import_froms.add(alias.name)
                elif isinstance(node, ast.Name):
                    used_names.add(node.id)
                elif isinstance(node, ast.Attribute):
                    # –î–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ç–∏–ø–∞ module.function
                    if isinstance(node.value, ast.Name):
                        used_names.add(node.value.id)
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            unused = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            for imp in imports:
                if imp not in used_names:
                    unused.append(imp)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã from
            for imp in import_froms:
                if imp not in used_names:
                    unused.append(imp)
            
            return {"unused": unused, "total": len(imports) + len(import_froms)}
            
        except Exception as e:
            return {"error": str(e)}
    
    def analyze_project(self) -> Dict[str, Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç."""
        results = {}
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
        for py_file in self.project_root.rglob("*.py"):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º __pycache__
            if "__pycache__" in str(py_file):
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            if "venv" in str(py_file) or "env" in str(py_file):
                continue
            
            relative_path = py_file.relative_to(self.project_root)
            result = self.analyze_file(py_file)
            results[str(relative_path)] = result
        
        return results
    
    def print_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–∞—Ö."""
        print("üîç –ê–Ω–∞–ª–∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
        print()
        
        results = self.analyze_project()
        
        total_files = 0
        files_with_unused = 0
        total_unused = 0
        
        for file_path, result in results.items():
            if "error" in result:
                print(f"‚ùå {file_path}: {result['error']}")
                continue
            
            total_files += 1
            
            if result["unused"]:
                files_with_unused += 1
                total_unused += len(result["unused"])
                print(f"‚ö†Ô∏è  {file_path}:")
                for unused in result["unused"]:
                    print(f"   ‚Ä¢ {unused}")
                print()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        print(f"   –§–∞–π–ª–æ–≤ —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏: {files_with_unused}")
        print(f"   –í—Å–µ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {total_unused}")
        
        if files_with_unused == 0:
            print("üéâ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!")


if __name__ == "__main__":
    analyzer = ImportAnalyzer(".")
    analyzer.print_report()
