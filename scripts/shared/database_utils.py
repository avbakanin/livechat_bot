#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö.
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
"""

import asyncio
import os
import sys
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

import asyncpg
from dotenv import load_dotenv


class DatabaseConnection:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        load_dotenv()
        self.connection: Optional[asyncpg.Connection] = None
    
    async def connect(self) -> asyncpg.Connection:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.connection is None or self.connection.is_closed():
            self.connection = await asyncpg.connect(
                host=os.getenv("DB_HOST", "localhost"),
                port=int(os.getenv("DB_PORT", "5432")),
                user=os.getenv("DB_USER", "postgres"),
                password=os.getenv("DB_PASSWORD", "postgres"),
                database=os.getenv("DB_NAME", "livechat_bot")
            )
        return self.connection
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.connection and not self.connection.is_closed():
            await self.connection.close()
    
    async def __aenter__(self):
        """Async context manager entry."""
        await self.connect()
        return self.connection
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit."""
        await self.close()


class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    
    def __init__(self, db_connection: DatabaseConnection):
        self.db = db_connection
    
    async def get_user_info(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        async with self.db as conn:
            row = await conn.fetchrow(
                "SELECT * FROM users WHERE id = $1",
                user_id
            )
            return dict(row) if row else None
    
    async def update_user_subscription(
        self, 
        user_id: int, 
        status: str = "premium",
        days_duration: int = 120
    ) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self.db as conn:
            expires_at = datetime.utcnow().replace(microsecond=0) + timedelta(days=days_duration)
            
            result = await conn.execute("""
                UPDATE users 
                SET 
                    subscription_status = $1,
                    subscription_expires_at = $2,
                    consent_given = TRUE,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = $3
            """, status, expires_at, user_id)
            
            return "UPDATE 1" in result
    
    async def clear_user_cache(self, user_id: int) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self.db as conn:
            try:
                await conn.execute(
                    "DELETE FROM user_cache WHERE user_id = $1",
                    user_id
                )
                return True
            except Exception:
                return False
    
    async def print_user_status(self, user_id: int):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_info = await self.get_user_info(user_id)
        
        if not user_info:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
        print(f"  ID: {user_info['id']}")
        print(f"  Username: {user_info['username']}")
        print(f"  Subscription Status: {user_info['subscription_status']}")
        print(f"  Subscription Expires At: {user_info['subscription_expires_at']}")
        print(f"  Consent Given: {user_info['consent_given']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        expires_at = user_info['subscription_expires_at']
        if expires_at:
            now = datetime.utcnow()
            if expires_at > now:
                days_remaining = (expires_at - now).days
                hours_remaining = (expires_at - now).seconds // 3600
                print(f"  ‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!")
                print(f"  ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω–µ–π, {hours_remaining} —á–∞—Å–æ–≤")
            else:
                print(f"  ‚ùå –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!")


class PremiumFixer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏."""
    
    def __init__(self, db_connection: DatabaseConnection):
        self.db = db_connection
        self.user_manager = UserManager(db_connection)
    
    async def fix_user_premium(self, user_id: int, days_duration: int = 120) -> bool:
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        print(f"üîç –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self.user_manager.print_user_status(user_id)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        print(f"\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days_duration} –¥–Ω–µ–π...")
        success = await self.user_manager.update_user_subscription(user_id, days_duration=days_duration)
        
        if success:
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            
            # –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
            print("\nüßπ –û—á–∏—â–∞–µ–º –∫—ç—à...")
            cache_cleared = await self.user_manager.clear_user_cache(user_id)
            if cache_cleared:
                print("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!")
            else:
                print("‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
            await self.user_manager.print_user_status(user_id)
            
            print("\nüéØ –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –≤ –±–æ—Ç–µ!")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!")
            return False


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def fix_premium_subscription(user_id: int = 627875032, days_duration: int = 120):
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = DatabaseConnection()
    fixer = PremiumFixer(db)
    
    try:
        await fixer.fix_user_premium(user_id, days_duration)
    finally:
        await db.close()


async def clear_user_cache(user_id: int = 627875032):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = DatabaseConnection()
    user_manager = UserManager(db)
    
    try:
        print(f"üßπ –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        
        # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î...")
        await user_manager.update_user_subscription(user_id)
        
        # –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
        cache_cleared = await user_manager.clear_user_cache(user_id)
        if cache_cleared:
            print("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!")
        else:
            print("‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
        await user_manager.print_user_status(user_id)
        
        print("\nüéØ –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –≤ –±–æ—Ç–µ!")
        
    finally:
        await db.close()


async def clear_user_cache_force(user_id: int = 627875032):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–¥."""
    # –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    project_root = Path(__file__).parent.parent.parent
    sys.path.insert(0, str(project_root))
    
    try:
        from app.shared.fsm.user_cache import user_cache
        
        print(f"üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        
        # –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_cache.invalidate(user_id)
        print(f"‚úÖ –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω!")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω
        cached_data = await user_cache.get(user_id)
        if cached_data is None:
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –∫—ç—à –æ—á–∏—â–µ–Ω")
        else:
            print("‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            
        print("\nüéØ –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –≤ –±–æ—Ç–µ!")
        print("üìù –ö—ç—à –æ—á–∏—â–µ–Ω, –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.")
        
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å user_cache: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    async def demo():
        print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DatabaseUtils ===")
        print()
        
        # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
        await fix_premium_subscription()
        print()
        
        # –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
        await clear_user_cache()
        print()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
        await clear_user_cache_force()
    
    asyncio.run(demo())
