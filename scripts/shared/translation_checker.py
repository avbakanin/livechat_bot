#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö maintenance.
"""

import json
import os
from typing import List, Dict, Optional, Any
from dataclasses import dataclass


@dataclass
class TranslationCheckResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
    language: str
    found: bool
    value: Optional[str] = None
    error: Optional[str] = None
    additional_info: Optional[Dict[str, Any]] = None


@dataclass
class TranslationCheckSummary:
    """–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤."""
    total_languages: int
    successful_checks: int
    missing_translations: List[str]
    errors: List[str]
    results: List[TranslationCheckResult]


class TranslationChecker:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤."""
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    SUPPORTED_LANGUAGES = ['de', 'en', 'es', 'fr', 'it', 'pl', 'ru', 'sr', 'tr']
    
    def __init__(self, languages: Optional[List[str]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—â–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.
        
        Args:
            languages: –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫.
        """
        self.languages = languages or self.SUPPORTED_LANGUAGES
    
    def check_translation_path(
        self, 
        path: str, 
        expected_value: Optional[str] = None,
        check_emoji: Optional[str] = None,
        check_keywords: Optional[List[str]] = None
    ) -> TranslationCheckSummary:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –≤ JSON.
        
        Args:
            path: –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é –≤ JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'commands.status.premium_promo')
            expected_value: –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
            check_emoji: –≠–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ –ø–µ—Ä–µ–≤–æ–¥–µ
            check_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ –ø–µ—Ä–µ–≤–æ–¥–µ
            
        Returns:
            TranslationCheckSummary —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = []
        missing_translations = []
        errors = []
        
        for lang in self.languages:
            result = self._check_single_translation(
                lang, path, expected_value, check_emoji, check_keywords
            )
            results.append(result)
            
            if not result.found:
                missing_translations.append(lang)
            if result.error:
                errors.append(f"{lang}: {result.error}")
        
        return TranslationCheckSummary(
            total_languages=len(self.languages),
            successful_checks=len(self.languages) - len(missing_translations) - len(errors),
            missing_translations=missing_translations,
            errors=errors,
            results=results
        )
    
    def _check_single_translation(
        self,
        language: str,
        path: str,
        expected_value: Optional[str] = None,
        check_emoji: Optional[str] = None,
        check_keywords: Optional[List[str]] = None
    ) -> TranslationCheckResult:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
        file_path = f"locales/{language}/translations.json"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            return TranslationCheckResult(
                language=language,
                found=False,
                error=f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
            value = self._get_nested_value(data, path)
            
            if value is None:
                return TranslationCheckResult(
                    language=language,
                    found=False,
                    error=f"–ü—É—Ç—å {path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON"
                )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            additional_info = {}
            
            if check_emoji and check_emoji not in value:
                additional_info['missing_emoji'] = check_emoji
            
            if check_keywords:
                missing_keywords = [
                    kw for kw in check_keywords 
                    if kw.lower() not in value.lower()
                ]
                if missing_keywords:
                    additional_info['missing_keywords'] = missing_keywords
            
            if expected_value and value != expected_value:
                additional_info['value_mismatch'] = {
                    'expected': expected_value,
                    'actual': value
                }
            
            return TranslationCheckResult(
                language=language,
                found=True,
                value=value,
                additional_info=additional_info if additional_info else None
            )
            
        except Exception as e:
            return TranslationCheckResult(
                language=language,
                found=False,
                error=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}"
            )
    
    def _get_nested_value(self, data: Dict, path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –ø—É—Ç–∏ –≤ JSON."""
        keys = path.split('.')
        current = data
        
        for key in keys:
            if isinstance(current, dict) and key in current:
                current = current[key]
            else:
                return None
        
        return current
    
    def print_summary(self, summary: TranslationCheckSummary, title: str = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        print(f"üîç {title}...")
        print()
        
        for result in summary.results:
            if result.found:
                print(f"‚úÖ {result.language.upper()}: {result.value}")
                
                if result.additional_info:
                    if 'missing_emoji' in result.additional_info:
                        print(f"   ‚ùå –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ {result.additional_info['missing_emoji']}")
                    elif 'missing_keywords' in result.additional_info:
                        print(f"   ‚ùå –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(result.additional_info['missing_keywords'])}")
                    elif 'value_mismatch' in result.additional_info:
                        print(f"   ‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º")
            else:
                print(f"‚ùå {result.language.upper()}: {result.error}")
        
        print()
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {summary.successful_checks}/{summary.total_languages}")
        
        if summary.missing_translations:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è: {', '.join(summary.missing_translations)}")
        
        if summary.errors:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {len(summary.errors)}")
            for error in summary.errors:
                print(f"   ‚Ä¢ {error}")
        
        if not summary.missing_translations and not summary.errors:
            print("üéâ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    
    def check_premium_promo(self, check_emoji: bool = False) -> TranslationCheckSummary:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã premium_promo."""
        path = "commands.status.premium_promo"
        check_emoji_str = "üíé" if check_emoji else None
        
        summary = self.check_translation_path(path, check_emoji=check_emoji_str)
        
        title = "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã premium_promo —Å —ç–º–æ–¥–∑–∏ –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö" if check_emoji else "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã premium_promo –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö"
        self.print_summary(summary, title)
        
        if check_emoji:
            print("üíé –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–º–æ–¥–∑–∏ –∞–ª–º–∞–∑–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è!")
        
        return summary
    
    def check_stop_success(self) -> TranslationCheckSummary:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã stop.success."""
        path = "commands.stop.success"
        check_emoji_str = "üò¢"
        check_keywords = ['return', 'ritorno', 'regreso', 'retour', 'powr√≥t', '–≤–æ–∑–≤—Ä–∞—â', '–ø–æ–≤—Ä–∞—Ç–∞–∫', 'd√∂n√º≈ü']
        
        summary = self.check_translation_path(
            path, 
            check_emoji=check_emoji_str,
            check_keywords=check_keywords
        )
        
        self.print_summary(summary, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã stop.success –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö")
        print("üò¢ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–∞–º –∂–∞–ª—å –∏ –º—ã –∂–¥–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è!")
        
        return summary
    
    def check_button_translation(self, button_key: str) -> TranslationCheckSummary:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –∫–Ω–æ–ø–∫–∏."""
        path = f"buttons.{button_key}"
        
        summary = self.check_translation_path(path)
        
        self.print_summary(summary, f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ '{button_key}'")
        
        if not summary.missing_translations:
            print("üéâ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        return summary
    
    def check_gender_buttons(self) -> TranslationCheckSummary:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞."""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö...")
        print()
        
        female_summary = self.check_translation_path("buttons.choose_female")
        male_summary = self.check_translation_path("buttons.choose_male")
        
        for i, lang in enumerate(self.languages):
            female_result = female_summary.results[i]
            male_result = male_summary.results[i]
            
            print(f"‚úÖ {lang.upper()}:")
            if female_result.found:
                print(f"  –î–µ–≤—É—à–∫–∞: {female_result.value}")
            else:
                print(f"  ‚ùå –î–µ–≤—É—à–∫–∞: {female_result.error}")
                
            if male_result.found:
                print(f"  –ú—É–∂—á–∏–Ω–∞: {male_result.value}")
            else:
                print(f"  ‚ùå –ú—É–∂—á–∏–Ω–∞: {male_result.error}")
            print()
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        return female_summary
    
    def check_reset_info_with_emoji(self) -> TranslationCheckSummary:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã reset_info —Å —ç–º–æ–¥–∑–∏ —á–∞—Å–æ–≤."""
        path = "commands.status.reset_info"
        check_emoji_str = "‚è∞"
        
        summary = self.check_translation_path(path, check_emoji=check_emoji_str)
        
        self.print_summary(summary, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã reset_info —Å —ç–º–æ–¥–∑–∏ —á–∞—Å–æ–≤ –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö")
        print("‚è∞ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–º–æ–¥–∑–∏ —á–∞—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞!")
        
        return summary


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def check_premium_promo():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã premium_promo –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö."""
    checker = TranslationChecker()
    checker.check_premium_promo(check_emoji=False)


def check_premium_promo_with_emoji():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã premium_promo —Å —ç–º–æ–¥–∑–∏ –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö."""
    checker = TranslationChecker()
    checker.check_premium_promo(check_emoji=True)


def check_stop_success_translations():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã stop.success –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö."""
    checker = TranslationChecker()
    checker.check_stop_success()


def check_translations():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'extend_premium'."""
    checker = TranslationChecker()
    checker.check_button_translation('extend_premium')


def check_gender_buttons():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö."""
    checker = TranslationChecker()
    checker.check_gender_buttons()


def check_reset_info_with_emoji():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã reset_info —Å —ç–º–æ–¥–∑–∏ —á–∞—Å–æ–≤ –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö."""
    checker = TranslationChecker()
    checker.check_reset_info_with_emoji()


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    checker = TranslationChecker()
    
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è TranslationChecker ===")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ premium_promo
    checker.check_premium_promo(check_emoji=False)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ stop.success
    checker.check_stop_success()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏
    checker.check_button_translation('extend_premium')
